#This Password Strength Evaluator is intended for educational purposes only. While it provides guidance on creating stronger passwords, 
#it should not be solely relied upon for securing sensitive accounts. Users should follow best practices for password management, including 
#using unique passwords for different accounts, enabling two-factor authentication where available, and regularly updating passwords. 
#The developers of this application do not assume any responsibility for the security of passwords evaluated using this tool. Always use 
#additional security measures to protect sensitive information.

import re
import tkinter as tk
from tkinter import ttk
from collections import Counter

# Common passwords list (top 50)
common_passwords = [
    "123456", "123456789", "qwerty", "password", "12345678", "123123", "12345", "1234567", "qwertyuiop",
    "111111", "123321", "abc123", "password1", "1234", "654321", "555555", "666666", "7777777", "888888", "987654321",
    "qazwsx", "mynoob", "123qwe", "zxcvbnm", "1q2w3e4r", "121212", "asdasd", "a1b2c3", "aaa111", "abcdef", "a123456",
    "iloveyou", "trustno1", "sunshine", "princess", "dragon", "password123", "admin", "welcome", "solo", "monkey",
    "login", "abc123456", "1111", "letmein", "123", "football", "batman", "1234abcd", "baseball", "superman"
]

def check_common_patterns(password):
    """Check for common patterns like sequences, reversed sequences, or keyboard patterns."""
    patterns = [
        r'(.)\1{2,}',  # Repeated sequences (e.g., aaa, 111)
        r'(?:abcd|dcba|qwert|trewq|asdf|fdsa)',  # Keyboard patterns and reversed sequences
    ]
    return any(re.search(pattern, password, re.IGNORECASE) for pattern in patterns)

def evaluate_password(password):
    max_length = 20
    min_length = 8
    criteria = {
        'lowercase': re.compile(r'[a-z]'),
        'uppercase': re.compile(r'[A-Z]'),
        'numbers': re.compile(r'[0-9]'),
        'special': re.compile(r'[!@#$%^&*(),.?":{}|<>]')
    }
    
    feedback = []
    rounded_score = 2
    label = "Very Weak Password"
    
    if len(password) < min_length:
        feedback.append("Password is too short. Use at least 8 characters.")
    if len(password) > max_length:
        feedback.append(f"Password is too long. Use a maximum of {max_length} characters.")
    
    if password.lower() in common_passwords:
        feedback.append("This is a common password. Choose a more unique password.")
    
    if check_common_patterns(password):
        feedback.append("Your password contains common patterns or sequences. Avoid using such patterns.")
    
    counts = {key: len(re.findall(regex, password)) for key, regex in criteria.items()}

    for key, regex in criteria.items():
        if counts[key] == 0:
            feedback.append(f"Include {key} characters.")

    if all(counts.values()) and min_length <= len(password) <= max_length and password.lower() not in common_passwords:
        balance_score = min(counts.values()) / max(counts.values())
        length_score = len(password) / max_length
        
        total_score = (balance_score + length_score) / 2 * 10
        rounded_score = max(round(total_score), 2)  # Ensure minimum score is 2

        # Determine the label based on the score
        if rounded_score >= 10:
            label = "Very Strong Password"
        elif rounded_score >= 8:
            label = "Strong Password"
        elif rounded_score >= 6:
            label = "Moderate Password"
        elif rounded_score >= 4:
            label = "Weak Password"
        else:
            label = "Very Weak Password"
        
        feedback.append(label)
    else:
        feedback.append("Your password is weak due to the above reasons.")
    
    feedback.append("Example of a strong password: d9!3@F3^6t0l?q4d8F7o")

    return rounded_score, feedback

def update_feedback():
    password = entry.get()
    score, feedback = evaluate_password(password)
    
    feedback_label.config(text='\n'.join(feedback))
    strength_meter['value'] = score
    strength_meter_label.config(text=f"Strength: {score}/10")

# Create the main window
root = tk.Tk()
root.title("Password Strength Evaluator")

# Create and place the password entry field
entry_label = tk.Label(root, text="Enter a password:")
entry_label.pack(pady=5)
entry = tk.Entry(root, width=30)  # Removed show="*"
entry.pack(pady=5)

# Create and place the evaluate button
evaluate_button = tk.Button(root, text="Evaluate", command=update_feedback)
evaluate_button.pack(pady=5)

# Create and place the strength meter
strength_meter_label = tk.Label(root, text="Strength: 0/10")
strength_meter_label.pack(pady=5)
strength_meter = ttk.Progressbar(root, length=200, mode='determinate', maximum=10)
strength_meter.pack(pady=5)

# Create and place the feedback label
feedback_label = tk.Label(root, text="", justify="left")
feedback_label.pack(pady=10)

# Create and place the exit button
exit_button = tk.Button(root, text="Exit", command=root.quit)
exit_button.pack(pady=5)

# Run the main event loop
root.mainloop()
